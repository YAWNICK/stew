{"version":3,"sources":["import-adapter/vtt.js","App.js","reportWebVitals.js","index.js"],"names":["processParagraph","pStart","pEnd","pContent","paragraph","words","text","cChar","sumChars","reduce","total","word","length","totalTime","wordObj","start","end","push","timestringToFloat","timestring","splitedTimestring","split","parseInt","parseFloat","vttToDraft","vttText","console","log","paragraphs","wordsByParagraphs","results","vttLines","match","pop","shift","vttLine","trim","isNaN","startsWith","slice","includes","undefined","lineSplit","concat","groupWordsInParagraphs","forEach","i","paragraphObj","id","speaker","at","App","props","handleLoadMedia","files","file","document","createElement","canPlayType","type","fileURL","URL","createObjectURL","setState","mediaUrl","fileName","name","alert","handleLoadMediaUrl","prompt","handleLoadTranscriptJson","exportName","fileReader","FileReader","onload","event","transcriptData","target","result","readAsText","state","Button","variant","component","hidden","onChange","e","this","title","showTitle","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a5cc670.chunk.js","sourcesContent":["function processParagraph(pStart, pEnd, pContent) {\r\n  const paragraph = { words: [], text: pContent };\r\n  let cChar = 0;\r\n  const sumChars = pContent.reduce((total, word) => total + word.length, 0);\r\n  //let sum = numbers.reduce((totalValue, currentValue) => totalValue + currentValue, initialValue);\r\n  const totalTime = pEnd - pStart;\r\n\r\n  for (const word of pContent) {\r\n    //cChar += len(word)\r\n    const wordObj = { text: word, start: null, end: null };\r\n    wordObj.start = pStart + (totalTime * (cChar / sumChars));\r\n    cChar += word.length;\r\n    wordObj.end = pStart + (totalTime * (cChar / sumChars));\r\n\r\n    paragraph.words.push(wordObj);\r\n  }\r\n  // return complete paragraph json object\r\n\r\n  return paragraph;\r\n}\r\n\r\nfunction timestringToFloat(timestring) {\r\n  //example 01:33:31.979\r\n  // return float\r\n  const splitedTimestring = timestring.split(':');\r\n  const float = parseInt(splitedTimestring[0]) * 3600 + parseInt(splitedTimestring[1]) * 60 + parseFloat(splitedTimestring[2]);\r\n\r\n  return float;\r\n}\r\n\r\n/**\r\n * groups words list from autoEdit transcript based on punctuation.\r\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\r\n * @param {array} words - array of words objects from autoEdit transcript\r\n */\r\n\r\nconst groupWordsInParagraphs = (vttText) => {\r\n  const results = [];\r\n  //let paragraph = { words: [], text: [] };\r\n\r\n  const vttLines = vttText.match(\r\n    /^.*([\\n\\r]+|$)/gm\r\n  );\r\n  //need to check if last element is empty before deleting\r\n  vttLines.pop();\r\n  // remove first element\r\n  vttLines.shift();\r\n  let pStart, pEnd, pContent, paragraph;\r\n  for (let vttLine of vttLines) {\r\n    // e.g. '00:00:31.979 --> 00:00:38.409'\r\n    vttLine = vttLine.trim();\r\n    if (!isNaN(vttLine)) { continue; }\r\n    if (vttLine.startsWith('NOTE ')) { continue; }\r\n    if (vttLine.startsWith('- ')) {\r\n      vttLine = vttLine.slice(2);\r\n    }\r\n    if (vttLine.includes('-->')) {\r\n      if (pContent == undefined) {\r\n        pContent = [];\r\n        const lineSplit = vttLine.split(' --> ');\r\n        pStart = timestringToFloat(lineSplit[0]);\r\n        pEnd = timestringToFloat(lineSplit[1]);\r\n        continue;\r\n      }\r\n      // process\r\n      paragraph = processParagraph(pStart, pEnd, pContent);\r\n      // append paragraph to results\r\n      results.push(paragraph);\r\n      // empty pContent\r\n      pContent = [];\r\n      // set new pStart and pEnd\r\n      const lineSplit = vttLine.split(' --> ');\r\n      pStart = timestringToFloat(lineSplit[0]);\r\n      pEnd = timestringToFloat(lineSplit[1]);\r\n\r\n    } else { // content line\r\n\r\n      pContent = pContent.concat(vttLine.split(' '));\r\n    }\r\n\r\n  }\r\n\r\n  // process last paragraph\r\n  paragraph = processParagraph(pStart, pEnd, pContent);\r\n  // append paragraph to results\r\n  results.push(paragraph);\r\n  console.log(results);\r\n\r\n  return results;\r\n};\r\n\r\nconst vttToDraft = (vttText) => {\r\n  console.log(vttText)\r\n  const paragraphs = [];\r\n  let words = [];\r\n\r\n  const wordsByParagraphs = groupWordsInParagraphs(vttText);\r\n\r\n  wordsByParagraphs.forEach((paragraph, i) => {\r\n    const paragraphObj = {\r\n      id: i,\r\n      speaker: `TBC ${ i }`,\r\n      start: paragraph.words[0].start,\r\n      end: paragraph.words.at(-1).end,\r\n    }\r\n    paragraphs.push(paragraphObj)\r\n    words = words.concat(paragraph.words)\r\n\r\n  });\r\n\r\n  console.log({paragraphs, words})\r\n  return {paragraphs, words};\r\n};\r\n\r\nexport default vttToDraft;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Button from '@mui/material/Button'\r\nimport  SlateTranscriptEditor  from 'slate-transcript-editor';\r\nimport vttToDraft from './import-adapter/vtt';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      transcriptData: null,\r\n      mediaUrl: null,\r\n    };\r\n  }\r\n  \r\n  // https://stackoverflow.com/questions/8885701/play-local-hard-drive-video-file-with-html5-video-tag\r\n  handleLoadMedia = files => {\r\n  const file = files[0];\r\n  const videoNode = document.createElement('video');\r\n  const canPlay = videoNode.canPlayType(file.type);\r\n  \r\n  if (canPlay) {\r\n    const fileURL = URL.createObjectURL(file);\r\n    this.setState({\r\n      // transcriptData: DEMO_TRANSCRIPT,\r\n      mediaUrl: fileURL,\r\n      fileName: file.name\r\n    });\r\n  } else {\r\n    alert('Select a valid audio or video file.');\r\n  }\r\n  };\r\n  \r\n  handleLoadMediaUrl = () => {\r\n  const fileURL = prompt(\"Paste the URL you'd like to use here:\");\r\n  \r\n  this.setState({\r\n    mediaUrl: fileURL\r\n  });\r\n  };\r\n\r\n  \r\n  handleLoadTranscriptJson = files => {\r\n    const file = files[0];\r\n    // console.log(file);\r\n    // console.log('read ' + file.type);\r\n    this.setState({ exportName: file.name.split('.')[0] });\r\n    \r\n    const fileReader = new FileReader();\r\n    fileReader.onload = event => {\r\n\r\n      this.setState({\r\n        transcriptData: vttToDraft(event.target.result)\r\n      });\r\n    };\r\n    fileReader.readAsText(file);\r\n\r\n    \r\n  }\r\n  \r\n  render() {\r\n  return (\r\n    <div>\r\n      {/* <Button onClick={ () => this.handleLoadMediaUrl()} variant=\"contained\">Load Media URL</Button> */}\r\n      <Button variant=\"contained\" component=\"label\">\r\n        Load Media File\r\n      <input\r\n        hidden\r\n        type={ 'file' }\r\n        id={ 'mediaFile' }\r\n        onChange={ e => this.handleLoadMedia(e.target.files) }\r\n      />\r\n      </Button>\r\n      <Button variant=\"contained\" component=\"label\">\r\n        Load Transcript (vtt)\r\n      <input\r\n        hidden\r\n        type={ 'file' }\r\n        id={ 'transcriptFile' }\r\n        onChange={ e => this.handleLoadTranscriptJson(e.target.files) }\r\n      />\r\n      </Button>\r\n\r\n      {this.state.transcriptData && this.state.mediaUrl && \r\n      <SlateTranscriptEditor\r\n        mediaUrl={this.state.mediaUrl}\r\n        transcriptData={this.state.transcriptData}\r\n        title={this.state.exportName}\r\n        showTitle={true}\r\n      />}\r\n      \r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}